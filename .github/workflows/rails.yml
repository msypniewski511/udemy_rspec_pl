name: PR Review and Confirmation for Ruby on Rails

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
permissions:
  contents: read
  pull-requests: write  # This gives write permissions for commenting, labeling, etc.
  issues: write  # Needed for commenting on issues or pull requests

jobs:
  lint:
    name: Lint with RuboCop
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2

      - name: Install Dependencies
        run: |
          gem install bundler
          bundle add rubocop
          bundle install

      - name: Run RuboCop
        run: |
          bundle exec rubocop

      - name: Upload RuboCop Results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: rubocop-results
          path: rubocop-results.txt

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      # Add PostgreSQL service
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: udemy_words_app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # Set Rails environment to test
      RAILS_ENV: test
      # Set the database URL for connecting to PostgreSQL
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/udemy_words_app_test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2 # Use the version of Ruby you are using in your project

      - name: Install Dependencies
        run: |
          gem install bundler
          bundle install

      - name: Setup Database
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate

      - name: Run Tests with RSpec
        run: |
          bundle exec rspec
        # Uncomment below if you use Rails test framework instead of RSpec
        # run: |
        #   bundle exec rails test

      - name: Upload Test Results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.txt

  approve:
    name: Approve PR
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # This checks out the pull request branch
      - name: Approve Pull Request
        if: ${{ success() }}
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Comment if All Checks Passed
        if: ${{ success() }}
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"body": "All checks have passed! PR is approved for merge."}' \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments

  merge:
    name: Merge PR
    runs-on: ubuntu-latest
    needs: approve

    steps:
      - name: Merge Pull Request
        if: ${{ success() }}
        uses: peter-evans/merge-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request: ${{ github.event.pull_request.number }}
          merge-method: squash
